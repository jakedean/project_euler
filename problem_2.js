// Project Euler problem #2.
// The Fibonacci sequence is generated by adding the previous 2 terms.
// The first 10 terms will be 1,2,3,5,8,13,21,34,55,89.  Find the sum
// of all of the terms in the sequence whose values do not exceed 4 million.

// first we will require the js_utility_library I wrote, it has most of the functionality of underscore.js.
u = require('./utility/js_utility_library.js');

// First we will generate an array of all of the values in the sequence
// under 4 million.
var arrayOfFibonacciNums = [1, 2],
    currentNum = 0,
    // We will pass in the max from the command line.
    maxFibValue = u.toNumber(process.argv[2]),
    lengthOfFibonacciArray;

// Let's fill that array up!
while (currentNum < maxFibValue) {
	// Get the length of the array
	lengthOfFibonacciArray = arrayOfFibonacciNums.length;
  // We will add the previous 2 items in the array to get the new number.
  currentNum = arrayOfFibonacciNums[lengthOfFibonacciArray - 1] + arrayOfFibonacciNums[lengthOfFibonacciArray - 2];
  arrayOfFibonacciNums.push(currentNum);
}

// We will sum the even numbers now, The sequence goes even, odd, odd,
// even starting at 2.
var sumOfValues = 0;
for (var i = 1; i < arrayOfFibonacciNums.length; i += 3) {
  sumOfValues += arrayOfFibonacciNums[i];
}

// And boom goes the dynamite.
console.log('And the answer is ....: ' + sumOfValues);